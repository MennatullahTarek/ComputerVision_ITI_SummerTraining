{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "15eb6538",
   "metadata": {},
   "source": [
    "- ## <u><span style=\"color:teal;\"> Computer Vision: </span></u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfe91bcc",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8dc8d77c",
   "metadata": {},
   "source": [
    "###  <span style=\"color:teal;\"> Q1)</span> read `Task_in` image and then print image `shape` ,`plot` the image using  `matplotlib` and `opencv` then edit the right corner pixel to be `red` color then save the  image as (`.jpg`,`.npg`) to your current folder name it `my_image.png` then read both  image again. \n",
    "- Import libraries.\n",
    "- Read `Task_in` image and print shape , show image.\n",
    "- Change the color of the right corner pixel to `red` and display it.\n",
    "- Save the modified image as `JPG` , `PNG`.\n",
    "- Figer them to make observation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6fc2a02",
   "metadata": {},
   "source": [
    "- #### <u><span style=\"color:teal;\"> Import Libraries: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9b04a5c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a77ca12",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\"> Read `Task_in` image and print shape , show image. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "884e8372",
   "metadata": {},
   "outputs": [],
   "source": [
    "image=cv2.imread('Task_in.jpg') # Read image BGR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3fd42379",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1ac3609b760>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image.shape\n",
    "plt.imshow(image[:,:,::-1]) # show images RGB"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a6f9a54",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Change the color of the right corner pixel to `red`. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "697897ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1ac360eab50>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Change the color of the right corner pixel to red\n",
    "image[-1, -1] = [0, 0, 255]  \n",
    "\n",
    "# Display the modified image\n",
    "plt.imshow(image[:,:,::-1])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52f03d1",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Save the modified image as `JPG` and `PNG`. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9d3725ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the modified image as JPG\n",
    "cv2.imwrite('my_image.jpg', image)\n",
    "\n",
    "# Save the modified image as PNG\n",
    "cv2.imwrite('my_image.png', image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6410c0b0",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Read the saved `JPG` and `PNG`images. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "86541eff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read the saved JPG image\n",
    "image_jpg = cv2.imread('my_image.jpg')\n",
    "\n",
    "# Read the saved PNG image\n",
    "image_png = cv2.imread('my_image.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b3101e4",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Figer them to make observation. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1a7a63ef",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'PNG Image')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig, axis = plt.subplots(1,2)\n",
    "axis[0].imshow(image_jpg[:,:,::-1])\n",
    "axis[0].set_title('JPG Image')\n",
    "\n",
    "\n",
    "axis[1].imshow(image_png[:,:,::-1])\n",
    "axis[1].set_title('PNG Image')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "983c3536",
   "metadata": {},
   "source": [
    " #### <u><span style=\"color:teal;\">  Observation: </span></u>\n",
    "- It seams that `PNG image` format is better than `JPG image` format, it is also look more acurate.\n",
    "- `PNG image` has high-quality but `JPG image` seems to lose color.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6536c1f7",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78f1c1f3",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de41673e",
   "metadata": {},
   "source": [
    "###  <span style=\"color:teal;\"> Q2)</span> make `51*51*3` RGB image with `Blue` color then save it as`Blue.jpg`.\n",
    "- Make `51*51*3` RGB image with `blue` color.\n",
    "- Save it as `Blue.jpg`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91fbde79",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Make `51*51*3` RGB image with `blue` color. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ad99120e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1ac362d2520>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "RGB_image=np.zeros((51,51,3),np.uint8)\n",
    "RGB_image[:]=(0,0,255)\n",
    "\n",
    "# Display the modified image\n",
    "plt.imshow(RGB_image)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32447256",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:teal;\">  Save it as `Blue.jpg`. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "87abd28d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the modified image as JPG\n",
    "cv2.imwrite('Blue.jpg', image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64831f58",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73b4b455",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5eb7de4e",
   "metadata": {},
   "source": [
    "###  <span style=\"color:teal;\"> Q3)</span> Make `trackbar` for rgb colors with window `colors`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "cb1e97af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10\n",
      "10\n",
      "11\n",
      "16\n",
      "20\n",
      "30\n",
      "36\n",
      "38\n",
      "42\n",
      "45\n",
      "48\n",
      "50\n",
      "51\n",
      "53\n",
      "54\n",
      "58\n",
      "65\n",
      "69\n",
      "71\n",
      "72\n",
      "74\n",
      "75\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "81\n",
      "82\n",
      "83\n",
      "82\n",
      "81\n",
      "80\n",
      "79\n",
      "78\n",
      "77\n",
      "76\n",
      "75\n",
      "74\n",
      "73\n",
      "72\n",
      "71\n",
      "66\n",
      "57\n",
      "48\n",
      "39\n",
      "33\n",
      "30\n",
      "27\n",
      "25\n",
      "23\n",
      "22\n",
      "21\n",
      "20\n",
      "19\n",
      "18\n",
      "17\n",
      "16\n",
      "14\n",
      "13\n",
      "11\n",
      "10\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "0\n",
      "11\n",
      "13\n",
      "16\n",
      "17\n",
      "20\n",
      "23\n",
      "25\n",
      "27\n",
      "28\n",
      "30\n",
      "32\n",
      "33\n",
      "34\n",
      "35\n",
      "36\n",
      "38\n",
      "39\n",
      "41\n",
      "42\n",
      "44\n",
      "45\n",
      "46\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "58\n",
      "57\n",
      "56\n",
      "55\n",
      "54\n",
      "53\n",
      "52\n",
      "51\n",
      "49\n",
      "48\n",
      "46\n",
      "43\n",
      "37\n",
      "30\n",
      "23\n",
      "19\n",
      "15\n",
      "10\n",
      "9\n",
      "6\n",
      "4\n",
      "3\n",
      "2\n",
      "1\n",
      "0\n",
      "11\n",
      "14\n",
      "17\n",
      "19\n",
      "22\n",
      "23\n",
      "25\n",
      "26\n",
      "28\n",
      "29\n",
      "30\n",
      "31\n",
      "32\n",
      "33\n",
      "34\n",
      "36\n",
      "38\n",
      "41\n",
      "42\n",
      "44\n",
      "45\n",
      "47\n",
      "48\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "59\n",
      "60\n",
      "63\n",
      "66\n",
      "69\n",
      "71\n",
      "72\n",
      "74\n",
      "75\n",
      "77\n",
      "78\n",
      "79\n",
      "80\n",
      "78\n",
      "77\n",
      "76\n",
      "75\n",
      "74\n",
      "72\n",
      "71\n",
      "70\n",
      "68\n",
      "67\n",
      "65\n",
      "63\n",
      "62\n",
      "59\n",
      "58\n",
      "57\n",
      "54\n",
      "52\n",
      "51\n",
      "48\n",
      "46\n",
      "45\n",
      "43\n",
      "42\n",
      "40\n",
      "39\n",
      "38\n",
      "37\n",
      "36\n",
      "35\n",
      "34\n",
      "33\n",
      "31\n",
      "30\n",
      "25\n",
      "22\n",
      "17\n",
      "13\n",
      "9\n",
      "6\n",
      "3\n",
      "1\n",
      "0\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window named \"colors\"\n",
    "cv2.namedWindow('colors')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars for each color channel\n",
    "cv2.createTrackbar('Red', 'colors', 10, 255, nothing)\n",
    "cv2.createTrackbar('Geen', 'colors', 10, 255, nothing)\n",
    "cv2.createTrackbar('Blue', 'colors', 10, 255, nothing)\n",
    "\n",
    "\n",
    "image = np.zeros((500, 500, 3),np.uint8)\n",
    "\n",
    "while 1:\n",
    "    # Get current trackbar values\n",
    "    red = cv2.getTrackbarPos('Red', 'colors')\n",
    "    green = cv2.getTrackbarPos('Geen', 'colors')\n",
    "    blue = cv2.getTrackbarPos('Blue', 'colors')\n",
    "    \n",
    "    # Update the image with the current RGB values\n",
    "    image[:] = (blue, green,red)\n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('colors', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32cc42f4",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
