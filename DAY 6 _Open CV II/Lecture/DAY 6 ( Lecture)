{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cc7ef195",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#000099;\"> Import Libraries: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "70c7fd6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0ea3957",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25ca215e",
   "metadata": {},
   "source": [
    " - ###   <u><span style=\"color:#000099;\"> RGB Image with `blue` diognal: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "608153e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1b1b5de89d0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a 100x100 RGB image \n",
    "image = np.zeros((100,100,3),np.uint8)\n",
    "\n",
    "\n",
    "# Set the diagonal to blue\n",
    "for i,row in enumerate(image):\n",
    "    for j,col in enumerate(row):\n",
    "        if i == j:\n",
    "            image[i,j]= (0,0,255)\n",
    "    \n",
    "\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d786c64",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aa9ada7",
   "metadata": {},
   "source": [
    " ### <u><span style=\"color:#000099;\"> 4 Trackbar control 1 line motion `vertical` and `horizental` and one `pixel` motion: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "04280131",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def nothing(x):\n",
    "    pass\n",
    "\n",
    "\n",
    "cv2.namedWindow('Image')\n",
    "\n",
    "cv2.createTrackbar('Vertical', 'Image', 0, 400, nothing)\n",
    "cv2.createTrackbar('Horizontal', 'Image', 0, 400, nothing)\n",
    "\n",
    "\n",
    "cv2.createTrackbar('Pixel X', 'Image', 0, 400, nothing)\n",
    "cv2.createTrackbar('Pixel Y', 'Image', 0, 400, nothing)\n",
    "\n",
    "# Create an image\n",
    "image = np.zeros((400, 400, 3), np.uint8)\n",
    "\n",
    "while 1:\n",
    "  \n",
    "    vertical_pos = cv2.getTrackbarPos('Vertical', 'Image')\n",
    "    horizontal_pos = cv2.getTrackbarPos('Horizontal', 'Image')\n",
    "    pixel_x = cv2.getTrackbarPos('Pixel X', 'Image')\n",
    "    pixel_y = cv2.getTrackbarPos('Pixel Y', 'Image')\n",
    "\n",
    "  \n",
    "    image[:] = 0  \n",
    "    image[vertical_pos, :] = (255, 255, 255) \n",
    "    image[:, horizontal_pos] = (255, 255, 255) \n",
    "    image[pixel_y, pixel_x] = (255, 255, 255)  \n",
    "\n",
    "    \n",
    "    cv2.imshow('Image', image)\n",
    "\n",
    " \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa7c70b9",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0c627a3",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#000099;\"> `Grediant` colomn and row: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "83cf9d9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1b1b84a00a0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "image=np.zeros((256,256,3),np.uint8)\n",
    "\n",
    "image[150,:,2]=np.arange(0,256)\n",
    "image[:,50,0]=np.arange(0,256)\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34282082",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8047a62b",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#000099;\"> `Black` image with one vertical and one horizontal that appears in `random positions` in `random colors` </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "17c40321",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "\n",
    "image = np.zeros((400, 400, 3), np.uint8)\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    vertical_pos = random.randint(0, 399)\n",
    "    horizontal_pos = random.randint(0, 399)\n",
    "\n",
    "   \n",
    "    vertical_color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n",
    "    horizontal_color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n",
    "\n",
    "  \n",
    "    image[:] = 0  \n",
    "    image[vertical_pos, :] = vertical_color  \n",
    "    image[:, horizontal_pos] = horizontal_color \n",
    "    \n",
    "    cv2.imshow('Image', image)\n",
    "\n",
    "   \n",
    "    k= cv2.waitKey(500) \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73383325",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
