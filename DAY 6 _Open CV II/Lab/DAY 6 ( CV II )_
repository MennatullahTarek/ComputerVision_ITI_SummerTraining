{"cells":[{"cell_type":"markdown","id":"c66d3392","metadata":{"id":"c66d3392"},"source":["- ## <u><span style=\"color:#000099;\"> Computer Vision II : </span></u>\n"]},{"cell_type":"markdown","id":"7bc3c621","metadata":{"id":"7bc3c621"},"source":[""]},{"cell_type":"markdown","id":"fa6dfd89","metadata":{"id":"fa6dfd89"},"source":["- ### <u><span style=\"color:#000099;\"> Import Libraries: </span></u>\n","1. Numpy Library as `np`.\n","2. From Matplotlib import `pyplot`.\n","3. CV2."]},{"cell_type":"code","execution_count":null,"id":"82ee3fcf","metadata":{"id":"82ee3fcf"},"outputs":[],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import cv2"]},{"cell_type":"markdown","id":"3c40518b","metadata":{"id":"3c40518b"},"source":[""]},{"cell_type":"markdown","id":"44d5825c","metadata":{"id":"44d5825c"},"source":["###  <span style=\"color:#000099;\"> Q1)</span> Make `100*100 rgb` pixel image with `white` background and make diagonal of image with `black` color.\n","- Create a `100x100` RGB image.\n","- Set it to `white` background.\n","- Set the diagonal to `black`"]},{"cell_type":"markdown","id":"243b11ea","metadata":{"id":"243b11ea"},"source":["- #### <span style=\"color:#000099;\"> Using enumerate to make a `black` diognal </span>"]},{"cell_type":"code","execution_count":null,"id":"c44e81c7","metadata":{"id":"c44e81c7","outputId":"bbf97c6c-27f4-4964-e553-7bf8319d8478"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x1c297e1a5e0>"]},"execution_count":2,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["\n","# Create a 100x100 RGB image with white background\n","image = np.zeros((100,100,3),np.uint8)\n","image[:]= 255\n","\n","# Set the diagonal to black\n","for i,row in enumerate(image):\n","    for j,col in enumerate(row):\n","        if i == j:\n","            image[i,j]=0\n","\n","plt.imshow(image)"]},{"cell_type":"markdown","id":"8977beb0","metadata":{"id":"8977beb0"},"source":["- #### <span style=\"color:#000099;\"> Using range to make a `black` diognal </span>"]},{"cell_type":"code","execution_count":null,"id":"f4a46525","metadata":{"id":"f4a46525","outputId":"65d38d69-1c4e-4188-f658-b830d2986caf"},"outputs":[{"data":{"text/plain":["<matplotlib.image.AxesImage at 0x1c297e587f0>"]},"execution_count":3,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Create a 100x100 RGB image with white background\n","image= np.zeros((100,100,3),np.uint8)\n","image[:]= 255\n","\n","# Set the diagonal to black\n","for i in range(100):\n","    image[i, i] = 0\n","\n","plt.imshow(image)"]},{"cell_type":"markdown","id":"c029d8a8","metadata":{"id":"c029d8a8"},"source":[""]},{"cell_type":"markdown","id":"b0b57b74","metadata":{"id":"b0b57b74"},"source":["###  <span style=\"color:#000099;\"> Q2)</span> Run video stream using your `laptop camera` and `save` frames when press key `s` and`close` camera when press `q`, name of images should be `img.png + {counter}`.\n","- Run video stream using `laptop camera`.\n","- Make the camera `turn off` when user press `q`.\n","- `Save` frames when user press `s`."]},{"cell_type":"code","execution_count":null,"id":"f9377f8a","metadata":{"id":"f9377f8a","outputId":"cfbbe6e5-74a0-472c-8617-28fff4f67d5a"},"outputs":[{"name":"stdout","output_type":"stream","text":["break the loop\n"]}],"source":["# Run video stream using laptop camera\n","cap=cv2.VideoCapture(0)\n","counter = 0\n","\n","while cap.isOpened():\n","    state,frame=cap.read()\n","    if state:\n","        cv2.imshow('Window',frame)\n","        k=cv2.waitKey(100)\n","\n","     # press key q to close camera\n","\n","        if k==ord('q'):\n","            print('break the loop')\n","            break\n","\n","    # press key s to save images\n","        elif k==ord('s'):\n","            counter += 1\n","            cv2.imwrite(f'img{counter}.png',frame)\n","    else:\n","        print('can\\'t read frame')\n","        break\n","\n","cap.release()\n","cv2.destroyAllWindows()\n","\n"]},{"cell_type":"markdown","id":"d6194b7f","metadata":{"id":"d6194b7f"},"source":[""]},{"cell_type":"markdown","id":"67f42b8e","metadata":{"id":"67f42b8e"},"source":["###  <span style=\"color:#000099;\"> Q3)</span>  Make `100*100 rgb` pixel image with `black` background and make diagonal of image with `(x) color` such that x is came from rgb `trackbar`.\n","- Create a `100x100` RGB image with `black` background.\n","- Create trackbars to get `(x) color`\n","- Make a diagonal with `(x) color`.\n"]},{"cell_type":"code","execution_count":null,"id":"f6751a77","metadata":{"id":"f6751a77","outputId":"287d037c-775d-4b7b-9c8c-6a9870b67aa5"},"outputs":[{"name":"stdout","output_type":"stream","text":["10\n","16\n","21\n","26\n","30\n","32\n","35\n","39\n","44\n","46\n","49\n","52\n","54\n","58\n","61\n","64\n","68\n","72\n","82\n","88\n","93\n","99\n","109\n","115\n","120\n","124\n","128\n","135\n","141\n","147\n","159\n","163\n","167\n","171\n","173\n","175\n","177\n","181\n","184\n","186\n","190\n","192\n","195\n","197\n","200\n","202\n","204\n","206\n","209\n","211\n","213\n","214\n","215\n","216\n","217\n","218\n","220\n","223\n","227\n","230\n","238\n","244\n","248\n","252\n","253\n","254\n","255\n","251\n","249\n","247\n","243\n","241\n","232\n","226\n","222\n","218\n","215\n","213\n","212\n","211\n","210\n","209\n","208\n","207\n","201\n","187\n","178\n","169\n","161\n","154\n","148\n","144\n","141\n","137\n","135\n","133\n","129\n","127\n","124\n","121\n","119\n","114\n","110\n","107\n","105\n","101\n","96\n","89\n","85\n","81\n","75\n","69\n","63\n","61\n","59\n","58\n","56\n","55\n","54\n","53\n","52\n","51\n","50\n","49\n","48\n","47\n","45\n","42\n","36\n","30\n","25\n","20\n","14\n","7\n","6\n","4\n","3\n","2\n","0\n","2\n","4\n","6\n","8\n","11\n","14\n","25\n","40\n","46\n","52\n","55\n","60\n","63\n","68\n","72\n","74\n","77\n","80\n","83\n","85\n","90\n","92\n","94\n","96\n","97\n","99\n","100\n","102\n","104\n","106\n","107\n","109\n","112\n","116\n","117\n","118\n","120\n","121\n","122\n","123\n","124\n","125\n","126\n","127\n","128\n","130\n","131\n","133\n","134\n","136\n","138\n","141\n","144\n","146\n","147\n","150\n","151\n","153\n","155\n","157\n","158\n","159\n","160\n","162\n","163\n","164\n","165\n","166\n","167\n","168\n","172\n","176\n","178\n","181\n","182\n","183\n","185\n","186\n","187\n","188\n","190\n","191\n","192\n","193\n","194\n","195\n","196\n","198\n","199\n","200\n","201\n","203\n","204\n","206\n","207\n","208\n","209\n","210\n","211\n","210\n","209\n","208\n","207\n","206\n","break the loop\n"]}],"source":["def nothing(x):\n","    print(x)\n","\n","\n","# Create a window\n","cv2.namedWindow('window')\n","\n","\n","\n","# Create trackbars to get (x)color\n","cv2.createTrackbar('x_color', 'window', 10, 255, nothing)\n","\n","\n","# Create a 100x100 RGB image with black background\n","image = np.zeros((100, 100, 3),np.uint8)\n","\n","while 1:\n","\n","\n","    # Make a diagonal with (x) color\n","    red = 0\n","    green = cv2.getTrackbarPos('x_color', 'window')\n","    blue = 255 - green\n","    x_color = (red,green,blue)\n","\n","    for i in range(100):\n","        image[i, i] = x_color\n","\n","\n","\n","    # Show the image in the window\n","    cv2.imshow('window', image)\n","\n","    k= cv2.waitKey(1)\n","\n","    if k==ord('q'):\n","        print('break the loop')\n","        break\n","\n","\n","cv2.destroyAllWindows()"]},{"cell_type":"markdown","id":"2a66923b","metadata":{"id":"2a66923b"},"source":[""]},{"cell_type":"markdown","id":"caad9eb6","metadata":{"id":"caad9eb6"},"source":["###  <span style=\"color:#000099;\"> Q4)</span> create `100*100` rgb image with `black` background and make 1 vertical line and 1  horizontal line the `color` of both should be controlled spereat from `2 trackbar `\n","First one `horz` and second one is `vert`\n","- Create a `100x100` RGB image with a `black` background.\n","- Create trackbars to control the `colors` of the horizontal and vertical lines.\n","- Create a horizontal line and vertical line at position `50`."]},{"cell_type":"code","execution_count":null,"id":"b459cbb3","metadata":{"id":"b459cbb3","outputId":"2c0850e7-3f10-4d3f-d7e7-2b66c079b372"},"outputs":[{"name":"stdout","output_type":"stream","text":["break the loop\n"]}],"source":["\n","def nothing(x):\n","    pass\n","\n","# Create a window\n","cv2.namedWindow('window')\n","\n","# Create trackbars to control the colors of the horizontal and vertical lines\n","cv2.createTrackbar('horz', 'window', 10, 255, nothing)\n","cv2.createTrackbar('vert', 'window', 10, 255, nothing)\n","\n","# Create a 100x100 RGB image with a black background\n","image = np.zeros((100, 100, 3), np.uint8)\n","\n","while 1:\n","    # Get current trackbar values for horizontal and vertical lines\n","    horz = cv2.getTrackbarPos('horz', 'window')\n","    vert = cv2.getTrackbarPos('vert', 'window')\n","    horz_color = (0 , horz, 255 - horz)\n","    vert_color = (255 - vert , vert , 0)\n","\n","    # Create the horizontal line\n","    image[50, :] = horz_color\n","\n","    # Create the vertical line\n","    image[:, 50] = vert_color\n","\n","    # Show the image in the window\n","    cv2.imshow('window', image)\n","\n","    k= cv2.waitKey(1)\n","\n","    if k==ord('q'):\n","        print('break the loop')\n","        break\n","\n","cv2.destroyAllWindows()"]},{"cell_type":"markdown","id":"c9d92362","metadata":{"id":"c9d92362"},"source":[""]},{"cell_type":"markdown","id":"b69f11db","metadata":{"id":"b69f11db"},"source":["###  <span style=\"color:#000099;\"> Q5)</span> create `250*250` rgb image with `black` background and make 1 vertical line and 1  horizontal line with `red color` and both should be controlled spereat from `2  trackbar` to select the horizontal line in which row and vertical line in which  column.  \n","First one `horz` and second one is `vert` (Trackbar)\n","- Create a `250*250` RGB image with a `black` background.\n","- Create trackbars to control the `positions` of the horizontal and vertical lines\n","- Set the lines colors to `red`."]},{"cell_type":"code","execution_count":null,"id":"6ed92efd","metadata":{"id":"6ed92efd","outputId":"5f5e3170-e375-4d77-8018-40112f7082e4"},"outputs":[{"name":"stdout","output_type":"stream","text":["break the loop\n"]}],"source":["\n","def nothing(x):\n","    pass\n","\n","# Create a window\n","cv2.namedWindow('window')\n","\n","# Create trackbars to control the positions of the horizontal and vertical lines\n","cv2.createTrackbar('horz', 'window', 0, 255, nothing)\n","cv2.createTrackbar('vert', 'window', 0, 255, nothing)\n","\n","# Create a 100x100 RGB image with a black background\n","image = np.zeros((255, 255, 3), np.uint8)\n","\n","while 1:\n","    # Get current trackbar values for horizontal and vertical lines\n","    horz=cv2.getTrackbarPos('horz','window')\n","    vert=cv2.getTrackbarPos('vert','window')\n","    image[:]= 0\n","    image[horz,:]=(0,0,255)\n","    image[:,vert]=(0,0,255)\n","\n","    # Show the image in the window\n","    cv2.imshow('window', image)\n","\n","    k= cv2.waitKey(1)\n","\n","    if k==ord('q'):\n","        print('break the loop')\n","        break\n","\n","cv2.destroyAllWindows()"]},{"cell_type":"code","source":[],"metadata":{"id":"_eMNCg-6aGWA"},"id":"_eMNCg-6aGWA","execution_count":null,"outputs":[]},{"cell_type":"markdown","id":"3c3826b2","metadata":{"id":"3c3826b2"},"source":[""]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":5}