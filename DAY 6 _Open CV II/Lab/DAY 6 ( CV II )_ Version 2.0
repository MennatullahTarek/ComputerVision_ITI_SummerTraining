{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c66d3392",
   "metadata": {},
   "source": [
    "- ## <u><span style=\"color:#000099;\"> Computer Vision II : </span></u>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7bc3c621",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa6dfd89",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#000099;\"> Import Libraries: </span></u>\n",
    "1. Numpy Library as `np`.\n",
    "2. From Matplotlib import `pyplot`.\n",
    "3. CV2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "82ee3fcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c40518b",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44d5825c",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#000099;\"> Q1)</span> Make `100*100 rgb` pixel image with `white` background and make diagonal of image with `black` color.\n",
    "- Create a `100x100` RGB image.\n",
    "- Set it to `white` background.\n",
    "- Set the diagonal to `black`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "243b11ea",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:#000099;\"> Using enumerate to make a `black` diognal </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c44e81c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2370578ac70>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Create a 100x100 RGB image with white background\n",
    "image = np.zeros((100,100,3),np.uint8)\n",
    "image[:]= 255\n",
    "\n",
    "# Set the diagonal to black\n",
    "for i,row in enumerate(image):\n",
    "    for j,col in enumerate(row):\n",
    "        if i == j:\n",
    "            image[i,j]=0\n",
    "\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8977beb0",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:#000099;\"> Using range to make a `black` diognal </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4a46525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x237057d51f0>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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2bO1fft29fX1efcwT2ngMtCxY8fcXXfd5Q4dOuTOnz/vNm7c6CZPnuwuXbpkPTQTX/rSl9zhw4fdX//6V9fW1uaWLFniZs6c6T7++GPvnp07d7qioiL3s5/9zJ07d849+eSTbvr06S4ejxuO3M6ZM2fcPffc4x544AG3ceNG7zzz5Nx//vMfN2vWLPfMM8+4P//5z66jo8P97ne/c//4xz+8e5gn577zne+4KVOmuF/96leuo6PD/fSnP3Wf+cxn3N69e717mKeRy8gQeuihh9zatWuTzs2ZM8fV1dUZjSizdHd3O0muubnZOedcX1+fC4VCbufOnd49//vf/1wgEHCvvfaa1TDN9PT0uLKyMtfU1OSqq6u9EGKe+m3ZssUtWrTolteZp35Llixxzz77bNK5pUuXupUrVzrnmKd0ybjluN7eXrW2tqq2tjbpfG1trVpaWoxGlVlisZgk6e6775YkdXR0qKurK2nO/H6/qqurc3LO1q9fryVLlujRRx9NOs889Tt58qQqKyv1xBNPaNq0aZo3b54OHTrkXWee+i1atEhvvPGGLl68KEl65513dPr0aT322GOSmKd0ybhdtD/66CPduHFDwWAw6XwwGFRXV5fRqDKHc06bNm3SokWLVF5eLknevAw2Z5cuXRrzMVo6duyYWltb9fbbbw+4xjz1e++993TgwAFt2rRJ3/jGN3TmzBk9//zz8vv9WrVqFfP0/23ZskWxWExz5sxRXl6ebty4oR07dmjZsmWS+PeULhkXQp/w+XxJHzvnBpzLRRs2bNC7776r06dPD7iW63PW2dmpjRs3qrGxUZMmTbrlfbk+T319faqsrFRDQ4Mkad68eWpvb9eBAwe0atUq775cn6fjx4/ryJEjOnr0qObOnau2tjZFIhGFw2GtXr3auy/X52mkMm45burUqcrLyxtQ9XR3dw/4P45c89xzz+nkyZN66623NGPGDO98KBSSpJyfs9bWVnV3d6uiokL5+fnKz89Xc3OzXnnlFeXn53tzkevzNH36dN13331J5+69915dvnxZEv+ePvHiiy+qrq5OTz31lO6//349/fTTeuGFFxSNRiUxT+mScSE0ceJEVVRUqKmpKel8U1OTqqqqjEZlyzmnDRs26MSJE3rzzTdVWlqadL20tFShUChpznp7e9Xc3JxTc/bII4/o3Llzamtr847KykqtWLFCbW1tmj17NvMkaeHChQMe8b948aJmzZoliX9Pn7h69eqAt4Lm5eV5j2gzT2li+FDELX3yiPYPf/hDd/78eReJRNzkyZPdP//5T+uhmfj617/uAoGA+/3vf+8+/PBD77h69ap3z86dO10gEHAnTpxw586dc8uWLeNRUeeSno5zjnlyrv/x9fz8fLdjxw7397//3f34xz92hYWF7siRI949zJNzq1evdp///Oe9R7RPnDjhpk6d6jZv3uzdwzyNXEaGkHPOff/733ezZs1yEydOdF/4whe8x5FzkaRBj8OHD3v39PX1uZdfftmFQiHn9/vdww8/7M6dO2c36AxxcwgxT/1++ctfuvLycuf3+92cOXPcwYMHk64zT87F43G3ceNGN3PmTDdp0iQ3e/Zst3XrVpdIJLx7mKeR431CAAAzGdcTAgDkDkIIAGCGEAIAmCGEAABmCCEAgBlCCABghhACAJghhAAAZgghAIAZQggAYIYQAgCY+X/xIN7BlUn9kgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a 100x100 RGB image with white background\n",
    "image= np.zeros((100,100,3),np.uint8)\n",
    "image[:]= 255\n",
    "\n",
    "# Set the diagonal to black\n",
    "for i in range(100):\n",
    "    image[i, i] = 0\n",
    "\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c029d8a8",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0b57b74",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#000099;\"> Q2)</span> Run video stream using your `laptop camera` and `save` frames when press key `s` and`close` camera when press `q`, name of images should be `img.png + {counter}`.\n",
    "- Run video stream using `laptop camera`.\n",
    "- Make the camera `turn off` when user press `q`.\n",
    "- `Save` frames when user press `s`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f9377f8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "# Run video stream using laptop camera\n",
    "cap=cv2.VideoCapture(0)\n",
    "counter = 0\n",
    "\n",
    "while cap.isOpened():\n",
    "    state,frame=cap.read()\n",
    "    if state:\n",
    "        cv2.imshow('Window',frame)\n",
    "        k=cv2.waitKey(100)\n",
    "        \n",
    "     # press key q to close camera\n",
    "    \n",
    "        if k==ord('q'):\n",
    "            print('break the loop')\n",
    "            break\n",
    "            \n",
    "    # press key s to save images     \n",
    "        elif k==ord('s'):\n",
    "            counter += 1\n",
    "            cv2.imwrite(f'img{counter}.png',frame)\n",
    "    else:\n",
    "        print('can\\'t read frame')\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()        \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6194b7f",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67f42b8e",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#000099;\"> Q3)</span>  Make `100*100 rgb` pixel image with `black` background and make diagonal of image with `(x) color` such that x is came from rgb `trackbar`.\n",
    "- Create a `100x100` RGB image with `black` background.\n",
    "- Create trackbars to get `(x) color`\n",
    "- Make a diagonal with `(x) color`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f6751a77",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "13\n",
      "15\n",
      "18\n",
      "24\n",
      "25\n",
      "27\n",
      "31\n",
      "33\n",
      "35\n",
      "36\n",
      "37\n",
      "40\n",
      "42\n",
      "44\n",
      "48\n",
      "51\n",
      "56\n",
      "61\n",
      "63\n",
      "67\n",
      "68\n",
      "70\n",
      "72\n",
      "74\n",
      "75\n",
      "78\n",
      "79\n",
      "80\n",
      "82\n",
      "83\n",
      "84\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "98\n",
      "100\n",
      "108\n",
      "112\n",
      "119\n",
      "121\n",
      "124\n",
      "126\n",
      "129\n",
      "130\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "135\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars to get (x)color\n",
    "cv2.createTrackbar('x_color', 'window', 10, 255, nothing)\n",
    "\n",
    "\n",
    "# Create a 100x100 RGB image with black background\n",
    "image = np.zeros((100, 100, 3),np.uint8)\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    \n",
    "    # Make a diagonal with (x) color\n",
    "    red = 0\n",
    "    green = cv2.getTrackbarPos('x_color', 'window')\n",
    "    blue = 255 - green\n",
    "    x_color = (red,green,blue)\n",
    "    \n",
    "    for i in range(100):\n",
    "        image[i, i] = x_color\n",
    "\n",
    "    \n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6a416ff",
   "metadata": {},
   "source": [
    "- #### <span style=\"color:#000099;\"> Edit Version 2: </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6f6ad8e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10\n",
      "10\n",
      "9\n",
      "8\n",
      "7\n",
      "6\n",
      "5\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "11\n",
      "12\n",
      "13\n",
      "14\n",
      "15\n",
      "16\n",
      "0\n",
      "1\n",
      "3\n",
      "4\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n",
      "12\n",
      "14\n",
      "15\n",
      "17\n",
      "20\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "30\n",
      "29\n",
      "28\n",
      "27\n",
      "13\n",
      "20\n",
      "25\n",
      "28\n",
      "31\n",
      "34\n",
      "36\n",
      "37\n",
      "38\n",
      "40\n",
      "41\n",
      "42\n",
      "43\n",
      "45\n",
      "46\n",
      "47\n",
      "49\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "61\n",
      "63\n",
      "64\n",
      "65\n",
      "66\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "73\n",
      "74\n",
      "80\n",
      "84\n",
      "87\n",
      "88\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "99\n",
      "100\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "106\n",
      "107\n",
      "108\n",
      "109\n",
      "110\n",
      "111\n",
      "112\n",
      "114\n",
      "115\n",
      "116\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars to get (x)color\n",
    "cv2.createTrackbar('Red', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Geen', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Blue', 'window', 10, 255, nothing)\n",
    "\n",
    "\n",
    "\n",
    "# Create a 100x100 RGB image with black background\n",
    "image = np.zeros((100, 100, 3),np.uint8)\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    \n",
    "    # Make a diagonal with (x) color\n",
    "    red = cv2.getTrackbarPos('Red', 'window')\n",
    "    green = cv2.getTrackbarPos('Geen', 'window')\n",
    "    blue = cv2.getTrackbarPos('Blue', 'window')\n",
    "    \n",
    "    x_color = (blue,green,red)\n",
    "    \n",
    "    for i in range(100):\n",
    "        image[i, i] = x_color\n",
    "\n",
    "    \n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a66923b",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caad9eb6",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#000099;\"> Q4)</span> create `100*100` rgb image with `black` background and make 1 vertical line and 1  horizontal line the `color` of both should be controlled spereat from `2 trackbar `\n",
    "First one `horz` and second one is `vert`\n",
    "- Create a `100x100` RGB image with a `black` background.\n",
    "- Create trackbars to control the `colors` of the horizontal and vertical lines.\n",
    "- Create a horizontal line and vertical line at position `50`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b459cbb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def nothing(x):\n",
    "    pass\n",
    "\n",
    "# Create a window\n",
    "cv2.namedWindow('window')\n",
    "\n",
    "# Create trackbars to control the colors of the horizontal and vertical lines\n",
    "cv2.createTrackbar('horz', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('vert', 'window', 10, 255, nothing)\n",
    "\n",
    "# Create a 100x100 RGB image with a black background\n",
    "image = np.zeros((100, 100, 3), np.uint8)\n",
    "\n",
    "while 1:\n",
    "    # Get current trackbar values for horizontal and vertical lines\n",
    "    horz = cv2.getTrackbarPos('horz', 'window')\n",
    "    vert = cv2.getTrackbarPos('vert', 'window')\n",
    "    horz_color = (0 , horz, 255 - horz)\n",
    "    vert_color = (255 - vert , vert , 0)\n",
    "\n",
    "    # Create the horizontal line\n",
    "    image[50, :] = horz_color\n",
    "\n",
    "    # Create the vertical line\n",
    "    image[:, 50] = vert_color\n",
    "\n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "\n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9d92362",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69f11db",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#000099;\"> Q5)</span> create `250*250` rgb image with `black` background and make 1 vertical line and 1  horizontal line with `red color` and both should be controlled spereat from `2  trackbar` to select the horizontal line in which row and vertical line in which  column.  \n",
    "First one `horz` and second one is `vert` (Trackbar)\n",
    "- Create a `250*250` RGB image with a `black` background.\n",
    "- Create trackbars to control the `positions` of the horizontal and vertical lines\n",
    "- Set the lines colors to `red`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6ed92efd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def nothing(x):\n",
    "    pass\n",
    "\n",
    "# Create a window\n",
    "cv2.namedWindow('window')\n",
    "\n",
    "# Create trackbars to control the positions of the horizontal and vertical lines\n",
    "cv2.createTrackbar('horz', 'window', 0, 255, nothing)\n",
    "cv2.createTrackbar('vert', 'window', 0, 255, nothing)\n",
    "\n",
    "# Create a 100x100 RGB image with a black background\n",
    "image = np.zeros((255, 255, 3), np.uint8)\n",
    "\n",
    "while 1:\n",
    "    # Get current trackbar values for horizontal and vertical lines\n",
    "    horz=cv2.getTrackbarPos('horz','window')\n",
    "    vert=cv2.getTrackbarPos('vert','window')\n",
    "    image[:]= 0\n",
    "    image[horz,:]=(0,0,255)\n",
    "    image[:,vert]=(0,0,255)\n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "\n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "        \n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c3826b2",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
