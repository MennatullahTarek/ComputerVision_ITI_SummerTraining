{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ee9a470d",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#990000;\"> Import Libraries: </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5fd8770b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db357cf7",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5fb1312",
   "metadata": {},
   "source": [
    "- ###   <u><span style=\"color:#990000;\"> `Trackbar` control `startpoint` and `endpoint` of a `line` </span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6cf6c799",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "85\n",
      "165\n",
      "203\n",
      "224\n",
      "227\n",
      "230\n",
      "232\n",
      "233\n",
      "235\n",
      "236\n",
      "238\n",
      "3\n",
      "26\n",
      "41\n",
      "48\n",
      "61\n",
      "73\n",
      "79\n",
      "85\n",
      "93\n",
      "99\n",
      "105\n",
      "111\n",
      "122\n",
      "128\n",
      "134\n",
      "140\n",
      "146\n",
      "157\n",
      "163\n",
      "169\n",
      "175\n",
      "178\n",
      "190\n",
      "192\n",
      "198\n",
      "206\n",
      "208\n",
      "216\n",
      "217\n",
      "220\n",
      "222\n",
      "226\n",
      "227\n",
      "229\n",
      "230\n",
      "236\n",
      "241\n",
      "243\n",
      "245\n",
      "248\n",
      "258\n",
      "262\n",
      "271\n",
      "280\n",
      "286\n",
      "287\n",
      "289\n",
      "290\n",
      "292\n",
      "293\n",
      "294\n",
      "296\n",
      "297\n",
      "299\n",
      "300\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars for x1 , x2 , y1 , y2\n",
    "\n",
    "cv2.createTrackbar('x1', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('x2', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('y1', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('y2', 'window', 0, 500, nothing)\n",
    "\n",
    "\n",
    "# Create a 500x500 RGB image with black background\n",
    "image = np.zeros((500, 500, 3),np.uint8)\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    \n",
    "    \n",
    "    image[:]=0\n",
    "    x1 = cv2.getTrackbarPos('x1', 'window')\n",
    "    x2 = cv2.getTrackbarPos('x2', 'window')\n",
    "    y1 = cv2.getTrackbarPos('y1', 'window')\n",
    "    y2 = cv2.getTrackbarPos('y2', 'window')\n",
    "   \n",
    "    \n",
    "    cv2.line(image,(x1,y1),(x2,y2),255,3)\n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ce80570",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0d952ba",
   "metadata": {},
   "source": [
    "- ###   <u><span style=\"color:#990000;\"> `Trackbar` control `small circle` that moves within circumference of the `big circle`</span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ea304947",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "36\n",
      "58\n",
      "74\n",
      "82\n",
      "93\n",
      "102\n",
      "105\n",
      "114\n",
      "117\n",
      "120\n",
      "125\n",
      "133\n",
      "134\n",
      "140\n",
      "143\n",
      "147\n",
      "149\n",
      "150\n",
      "152\n",
      "156\n",
      "157\n",
      "162\n",
      "166\n",
      "169\n",
      "173\n",
      "178\n",
      "184\n",
      "185\n",
      "188\n",
      "192\n",
      "197\n",
      "201\n",
      "204\n",
      "207\n",
      "211\n",
      "214\n",
      "219\n",
      "222\n",
      "224\n",
      "230\n",
      "233\n",
      "241\n",
      "245\n",
      "258\n",
      "265\n",
      "271\n",
      "276\n",
      "281\n",
      "284\n",
      "289\n",
      "292\n",
      "296\n",
      "297\n",
      "300\n",
      "306\n",
      "310\n",
      "315\n",
      "318\n",
      "321\n",
      "328\n",
      "329\n",
      "332\n",
      "334\n",
      "335\n",
      "338\n",
      "341\n",
      "343\n",
      "347\n",
      "350\n",
      "353\n",
      "356\n",
      "359\n",
      "362\n",
      "364\n",
      "366\n",
      "367\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "from math import cos , sin , radians\n",
    "\n",
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "cv2.createTrackbar('angle', 'window', 0, 500, nothing)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    # Create a 500x500 RGB image with black background\n",
    "    image = np.zeros((500, 500, 3),np.uint8)\n",
    "   \n",
    "\n",
    "    cv2.circle(image,(250,250),100,255,2)\n",
    "    angle = cv2.getTrackbarPos('angle', 'window')\n",
    "    x= int (250 +100*cos(radians(angle)))\n",
    "    y= int (250 +100*sin(radians(angle)))\n",
    "   \n",
    "   \n",
    "    cv2.circle(image,(x,y),10,255,2)\n",
    "    \n",
    "    \n",
    "    \n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a27ed3",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75c43f01",
   "metadata": {},
   "source": [
    "- ###   <u><span style=\"color:#990000;\"> Draw a `circle` when user make a `double_click`.</span></u>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4db9e61d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "\n",
    "image = np.zeros((500, 500, 3),np.uint8)\n",
    "\n",
    "    \n",
    "\n",
    "cv2.namedWindow('window')\n",
    "def call_back (events,x,y,flag,param):\n",
    "     if events == cv2.EVENT_LBUTTONDBLCLK:\n",
    "            global image\n",
    "            image[:] = 0\n",
    "            cv2.circle(image,(x,y),50,255,2)\n",
    "            \n",
    "            \n",
    "cv2.setMouseCallback('window',call_back)\n",
    "\n",
    "while 1:\n",
    "# Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "   \n",
    "   \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdf56f80",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
