{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1591dba4",
   "metadata": {},
   "source": [
    "- ## <u><span style=\"color:#990000;\"> Computer Vision III : </span></u>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91d52eee",
   "metadata": {},
   "source": [
    "- ### <u><span style=\"color:#990000;\"> Import Libraries: </span></u>\n",
    "1. Numpy Library as `np`.\n",
    "2. From Matplotlib import `pyplot`.\n",
    "3. CV2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "57ed23e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import cv2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e3d3429",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40eb5207",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#990000;\"> Q1)</span>  Create image `256*256` Draw `red square` 50*50 in the center of `blue circle` with `radius 80` the center of both square and circle is the same center of image.\n",
    "- Create a `256x256` RGB image. \n",
    "- Draw `blue` circle with `radius 80` in the center.\n",
    "- Draw `red` square `50*50` in the center of the circle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "435d7722",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2030dd990a0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a 256x256 RGB image \n",
    "image = np.zeros((256,256,3),np.uint8)\n",
    "\n",
    "# Draw blue circle with radius 80 ( devide 256 by 2 to get the center)\n",
    "cv2.circle(image,(128,128),80,(0,0,255),3)\n",
    "\n",
    "# Draw red square 50*50 in the center\n",
    "cv2.rectangle(image,(128-25,128-25),(128+25,128+25),(255,0,0),3)\n",
    "\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa31213",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76219fed",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#990000;\"> Q2)</span>  make `trackbar` to control line `position`  , `color` and `thickness` in image `500*500` rgb.\n",
    "- Create a `500x500` RGB image.\n",
    "- Create trackbars for `position` x1 , x2 , y1 , y2.\n",
    "- Create trackbars for `color` red , green , blue.\n",
    "- Create trackbar for `thickness`.\n",
    "- Draw a `line` with the last values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2344ce0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10\n",
      "10\n",
      "1\n",
      "12\n",
      "24\n",
      "31\n",
      "35\n",
      "44\n",
      "47\n",
      "51\n",
      "55\n",
      "62\n",
      "65\n",
      "69\n",
      "72\n",
      "75\n",
      "79\n",
      "82\n",
      "83\n",
      "86\n",
      "90\n",
      "93\n",
      "96\n",
      "102\n",
      "105\n",
      "110\n",
      "113\n",
      "121\n",
      "128\n",
      "131\n",
      "135\n",
      "142\n",
      "144\n",
      "149\n",
      "152\n",
      "156\n",
      "163\n",
      "167\n",
      "170\n",
      "174\n",
      "178\n",
      "184\n",
      "193\n",
      "197\n",
      "200\n",
      "208\n",
      "223\n",
      "228\n",
      "229\n",
      "231\n",
      "232\n",
      "233\n",
      "234\n",
      "235\n",
      "236\n",
      "100\n",
      "200\n",
      "2\n",
      "8\n",
      "21\n",
      "31\n",
      "58\n",
      "70\n",
      "91\n",
      "99\n",
      "103\n",
      "109\n",
      "112\n",
      "115\n",
      "120\n",
      "123\n",
      "124\n",
      "125\n",
      "128\n",
      "129\n",
      "131\n",
      "133\n",
      "135\n",
      "137\n",
      "140\n",
      "142\n",
      "145\n",
      "148\n",
      "149\n",
      "152\n",
      "154\n",
      "155\n",
      "156\n",
      "158\n",
      "159\n",
      "160\n",
      "161\n",
      "162\n",
      "163\n",
      "12\n",
      "19\n",
      "26\n",
      "30\n",
      "35\n",
      "38\n",
      "42\n",
      "44\n",
      "46\n",
      "47\n",
      "50\n",
      "52\n",
      "54\n",
      "56\n",
      "58\n",
      "63\n",
      "65\n",
      "70\n",
      "72\n",
      "77\n",
      "81\n",
      "84\n",
      "88\n",
      "93\n",
      "95\n",
      "100\n",
      "102\n",
      "107\n",
      "109\n",
      "113\n",
      "115\n",
      "117\n",
      "119\n",
      "123\n",
      "124\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "131\n",
      "132\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "140\n",
      "142\n",
      "143\n",
      "144\n",
      "146\n",
      "147\n",
      "148\n",
      "149\n",
      "150\n",
      "151\n",
      "152\n",
      "153\n",
      "154\n",
      "156\n",
      "157\n",
      "158\n",
      "159\n",
      "161\n",
      "162\n",
      "163\n",
      "164\n",
      "166\n",
      "167\n",
      "168\n",
      "169\n",
      "170\n",
      "171\n",
      "173\n",
      "174\n",
      "175\n",
      "176\n",
      "177\n",
      "178\n",
      "179\n",
      "180\n",
      "181\n",
      "182\n",
      "183\n",
      "184\n",
      "185\n",
      "186\n",
      "187\n",
      "188\n",
      "189\n",
      "190\n",
      "192\n",
      "193\n",
      "194\n",
      "195\n",
      "196\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "5\n",
      "28\n",
      "37\n",
      "53\n",
      "68\n",
      "74\n",
      "80\n",
      "92\n",
      "98\n",
      "103\n",
      "114\n",
      "120\n",
      "126\n",
      "136\n",
      "140\n",
      "149\n",
      "152\n",
      "159\n",
      "162\n",
      "165\n",
      "171\n",
      "174\n",
      "177\n",
      "182\n",
      "185\n",
      "188\n",
      "190\n",
      "192\n",
      "194\n",
      "198\n",
      "201\n",
      "202\n",
      "204\n",
      "205\n",
      "208\n",
      "214\n",
      "215\n",
      "219\n",
      "221\n",
      "223\n",
      "226\n",
      "230\n",
      "233\n",
      "236\n",
      "242\n",
      "243\n",
      "247\n",
      "248\n",
      "250\n",
      "252\n",
      "253\n",
      "255\n",
      "259\n",
      "260\n",
      "261\n",
      "263\n",
      "265\n",
      "267\n",
      "269\n",
      "271\n",
      "272\n",
      "275\n",
      "277\n",
      "281\n",
      "282\n",
      "285\n",
      "287\n",
      "288\n",
      "290\n",
      "294\n",
      "295\n",
      "297\n",
      "300\n",
      "301\n",
      "302\n",
      "305\n",
      "306\n",
      "308\n",
      "309\n",
      "311\n",
      "312\n",
      "314\n",
      "317\n",
      "320\n",
      "323\n",
      "327\n",
      "330\n",
      "337\n",
      "342\n",
      "346\n",
      "356\n",
      "362\n",
      "368\n",
      "372\n",
      "376\n",
      "379\n",
      "383\n",
      "386\n",
      "389\n",
      "392\n",
      "394\n",
      "397\n",
      "400\n",
      "405\n",
      "407\n",
      "409\n",
      "411\n",
      "412\n",
      "414\n",
      "416\n",
      "417\n",
      "418\n",
      "420\n",
      "423\n",
      "425\n",
      "426\n",
      "428\n",
      "429\n",
      "432\n",
      "433\n",
      "434\n",
      "435\n",
      "437\n",
      "439\n",
      "440\n",
      "442\n",
      "444\n",
      "445\n",
      "446\n",
      "449\n",
      "450\n",
      "451\n",
      "452\n",
      "453\n",
      "454\n",
      "455\n",
      "456\n",
      "454\n",
      "453\n",
      "451\n",
      "449\n",
      "446\n",
      "445\n",
      "444\n",
      "442\n",
      "441\n",
      "439\n",
      "437\n",
      "435\n",
      "434\n",
      "435\n",
      "166\n",
      "174\n",
      "178\n",
      "187\n",
      "191\n",
      "201\n",
      "205\n",
      "209\n",
      "218\n",
      "222\n",
      "226\n",
      "232\n",
      "235\n",
      "239\n",
      "240\n",
      "243\n",
      "245\n",
      "247\n",
      "250\n",
      "253\n",
      "254\n",
      "255\n",
      "257\n",
      "259\n",
      "260\n",
      "261\n",
      "262\n",
      "263\n",
      "264\n",
      "265\n",
      "268\n",
      "270\n",
      "271\n",
      "273\n",
      "274\n",
      "275\n",
      "276\n",
      "202\n",
      "207\n",
      "213\n",
      "216\n",
      "227\n",
      "230\n",
      "236\n",
      "240\n",
      "246\n",
      "247\n",
      "252\n",
      "253\n",
      "257\n",
      "259\n",
      "260\n",
      "261\n",
      "262\n",
      "263\n",
      "265\n",
      "266\n",
      "267\n",
      "269\n",
      "271\n",
      "272\n",
      "274\n",
      "275\n",
      "277\n",
      "278\n",
      "279\n",
      "280\n",
      "281\n",
      "282\n",
      "283\n",
      "286\n",
      "287\n",
      "289\n",
      "291\n",
      "293\n",
      "294\n",
      "295\n",
      "296\n",
      "297\n",
      "298\n",
      "299\n",
      "297\n",
      "295\n",
      "294\n",
      "293\n",
      "291\n",
      "285\n",
      "281\n",
      "277\n",
      "273\n",
      "264\n",
      "260\n",
      "257\n",
      "250\n",
      "244\n",
      "236\n",
      "227\n",
      "219\n",
      "210\n",
      "201\n",
      "187\n",
      "180\n",
      "177\n",
      "173\n",
      "170\n",
      "166\n",
      "160\n",
      "157\n",
      "154\n",
      "152\n",
      "145\n",
      "142\n",
      "140\n",
      "138\n",
      "133\n",
      "131\n",
      "129\n",
      "128\n",
      "127\n",
      "126\n",
      "125\n",
      "124\n",
      "123\n",
      "121\n",
      "120\n",
      "119\n",
      "118\n",
      "117\n",
      "112\n",
      "110\n",
      "109\n",
      "107\n",
      "106\n",
      "104\n",
      "103\n",
      "102\n",
      "101\n",
      "99\n",
      "98\n",
      "96\n",
      "95\n",
      "94\n",
      "93\n",
      "92\n",
      "90\n",
      "89\n",
      "87\n",
      "86\n",
      "84\n",
      "85\n",
      "84\n",
      "82\n",
      "81\n",
      "80\n",
      "79\n",
      "77\n",
      "75\n",
      "73\n",
      "70\n",
      "67\n",
      "65\n",
      "63\n",
      "61\n",
      "58\n",
      "56\n",
      "54\n",
      "53\n",
      "52\n",
      "51\n",
      "50\n",
      "49\n",
      "48\n",
      "47\n",
      "46\n",
      "45\n",
      "44\n",
      "42\n",
      "41\n",
      "40\n",
      "39\n",
      "38\n",
      "37\n",
      "36\n",
      "233\n",
      "227\n",
      "223\n",
      "222\n",
      "215\n",
      "214\n",
      "211\n",
      "209\n",
      "206\n",
      "205\n",
      "201\n",
      "196\n",
      "194\n",
      "191\n",
      "188\n",
      "184\n",
      "181\n",
      "177\n",
      "173\n",
      "172\n",
      "167\n",
      "166\n",
      "163\n",
      "159\n",
      "158\n",
      "156\n",
      "152\n",
      "151\n",
      "147\n",
      "146\n",
      "145\n",
      "142\n",
      "141\n",
      "138\n",
      "137\n",
      "135\n",
      "133\n",
      "131\n",
      "130\n",
      "128\n",
      "127\n",
      "123\n",
      "118\n",
      "114\n",
      "110\n",
      "108\n",
      "103\n",
      "100\n",
      "99\n",
      "97\n",
      "96\n",
      "93\n",
      "91\n",
      "90\n",
      "89\n",
      "88\n",
      "87\n",
      "86\n",
      "87\n",
      "88\n",
      "89\n",
      "90\n",
      "176\n",
      "76\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "\n",
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars for position x1 , x2 , y1 , y2\n",
    "\n",
    "cv2.createTrackbar('x1', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('x2', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('y1', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('y2', 'window', 0, 500, nothing)\n",
    "\n",
    "\n",
    "# Create trackbars for color red , green , blue\n",
    "\n",
    "cv2.createTrackbar('Red', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Geen', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Blue', 'window', 10, 255, nothing)\n",
    "\n",
    "\n",
    "# Create trackbar for thickness\n",
    "\n",
    "cv2.createTrackbar('thickness', 'window', 1, 10, nothing)\n",
    "\n",
    "\n",
    "\n",
    "# Create a 500x500 RGB image \n",
    "image = np.zeros((500,500,3),np.uint8)\n",
    "\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    \n",
    "    \n",
    "    image[:]=0\n",
    "    x1 = cv2.getTrackbarPos('x1', 'window')\n",
    "    x2 = cv2.getTrackbarPos('x2', 'window')\n",
    "    y1 = cv2.getTrackbarPos('y1', 'window')\n",
    "    y2 = cv2.getTrackbarPos('y2', 'window')\n",
    "   \n",
    "\n",
    "    red = cv2.getTrackbarPos('Red', 'window')\n",
    "    green = cv2.getTrackbarPos('Geen', 'window')\n",
    "    blue = cv2.getTrackbarPos('Blue', 'window')\n",
    "    \n",
    "    thickness = cv2.getTrackbarPos('thickness', 'window')\n",
    "    \n",
    "\n",
    "\n",
    "    cv2.line(image,(x1,y1),(x2,y2),(blue,green,red),thickness)\n",
    "\n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f505896",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1658af5b",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#990000;\"> Q3)</span> Make `trackbar` to control `position`,`radius` and `color` of circle in image `500*500`\n",
    "-  Create a `500x500` RGB image.\n",
    "- Create trackbars for `position` x , y.\n",
    "- Create trackbars for `color` red , green , blue.\n",
    "- Create trackbar for `radius`.\n",
    "- Draw a `circle` with the last values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bfc3382d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n",
      "10\n",
      "10\n",
      "1\n",
      "11\n",
      "15\n",
      "17\n",
      "18\n",
      "20\n",
      "21\n",
      "22\n",
      "23\n",
      "24\n",
      "25\n",
      "26\n",
      "27\n",
      "28\n",
      "29\n",
      "31\n",
      "32\n",
      "34\n",
      "35\n",
      "36\n",
      "38\n",
      "39\n",
      "41\n",
      "43\n",
      "44\n",
      "46\n",
      "47\n",
      "49\n",
      "51\n",
      "54\n",
      "55\n",
      "56\n",
      "57\n",
      "58\n",
      "59\n",
      "60\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "2\n",
      "5\n",
      "6\n",
      "8\n",
      "10\n",
      "11\n",
      "13\n",
      "14\n",
      "15\n",
      "17\n",
      "18\n",
      "19\n",
      "20\n",
      "21\n",
      "23\n",
      "25\n",
      "27\n",
      "28\n",
      "31\n",
      "32\n",
      "34\n",
      "35\n",
      "36\n",
      "37\n",
      "38\n",
      "39\n",
      "40\n",
      "41\n",
      "42\n",
      "2\n",
      "11\n",
      "20\n",
      "28\n",
      "31\n",
      "37\n",
      "42\n",
      "44\n",
      "49\n",
      "52\n",
      "56\n",
      "60\n",
      "65\n",
      "68\n",
      "71\n",
      "73\n",
      "75\n",
      "77\n",
      "79\n",
      "80\n",
      "81\n",
      "84\n",
      "85\n",
      "87\n",
      "88\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "5\n",
      "13\n",
      "20\n",
      "27\n",
      "34\n",
      "37\n",
      "39\n",
      "44\n",
      "47\n",
      "48\n",
      "50\n",
      "51\n",
      "52\n",
      "53\n",
      "54\n",
      "55\n",
      "57\n",
      "59\n",
      "61\n",
      "62\n",
      "63\n",
      "64\n",
      "65\n",
      "68\n",
      "70\n",
      "71\n",
      "72\n",
      "74\n",
      "76\n",
      "78\n",
      "79\n",
      "81\n",
      "82\n",
      "83\n",
      "87\n",
      "89\n",
      "90\n",
      "91\n",
      "92\n",
      "93\n",
      "94\n",
      "95\n",
      "96\n",
      "97\n",
      "98\n",
      "100\n",
      "101\n",
      "102\n",
      "103\n",
      "104\n",
      "106\n",
      "107\n",
      "109\n",
      "110\n",
      "111\n",
      "112\n",
      "113\n",
      "114\n",
      "115\n",
      "116\n",
      "117\n",
      "118\n",
      "119\n",
      "121\n",
      "122\n",
      "123\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "131\n",
      "132\n",
      "133\n",
      "95\n",
      "98\n",
      "99\n",
      "103\n",
      "107\n",
      "109\n",
      "112\n",
      "113\n",
      "116\n",
      "117\n",
      "119\n",
      "120\n",
      "122\n",
      "124\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "130\n",
      "131\n",
      "132\n",
      "133\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "140\n",
      "141\n",
      "142\n",
      "144\n",
      "145\n",
      "146\n",
      "147\n",
      "148\n",
      "149\n",
      "148\n",
      "147\n",
      "145\n",
      "144\n",
      "142\n",
      "139\n",
      "137\n",
      "135\n",
      "133\n",
      "131\n",
      "130\n",
      "128\n",
      "125\n",
      "124\n",
      "120\n",
      "119\n",
      "117\n",
      "116\n",
      "114\n",
      "113\n",
      "112\n",
      "111\n",
      "110\n",
      "109\n",
      "106\n",
      "105\n",
      "104\n",
      "103\n",
      "98\n",
      "97\n",
      "95\n",
      "94\n",
      "93\n",
      "92\n",
      "91\n",
      "90\n",
      "89\n",
      "88\n",
      "87\n",
      "86\n",
      "85\n",
      "83\n",
      "82\n",
      "81\n",
      "77\n",
      "75\n",
      "74\n",
      "73\n",
      "71\n",
      "69\n",
      "68\n",
      "67\n",
      "66\n",
      "65\n",
      "66\n",
      "67\n",
      "66\n",
      "65\n",
      "63\n",
      "62\n",
      "61\n",
      "60\n",
      "59\n",
      "58\n",
      "57\n",
      "56\n",
      "55\n",
      "54\n",
      "53\n",
      "52\n",
      "51\n",
      "50\n",
      "49\n",
      "48\n",
      "49\n",
      "50\n",
      "128\n",
      "119\n",
      "117\n",
      "113\n",
      "112\n",
      "110\n",
      "109\n",
      "107\n",
      "106\n",
      "104\n",
      "103\n",
      "101\n",
      "100\n",
      "97\n",
      "96\n",
      "94\n",
      "92\n",
      "91\n",
      "90\n",
      "89\n",
      "87\n",
      "86\n",
      "85\n",
      "83\n",
      "81\n",
      "79\n",
      "78\n",
      "77\n",
      "76\n",
      "75\n",
      "74\n",
      "73\n",
      "72\n",
      "71\n",
      "70\n",
      "69\n",
      "68\n",
      "67\n",
      "68\n",
      "69\n",
      "70\n",
      "71\n",
      "72\n",
      "74\n",
      "75\n",
      "76\n",
      "77\n",
      "78\n",
      "80\n",
      "82\n",
      "83\n",
      "84\n",
      "85\n",
      "86\n",
      "88\n",
      "91\n",
      "94\n",
      "95\n",
      "97\n",
      "98\n",
      "101\n",
      "102\n",
      "104\n",
      "106\n",
      "108\n",
      "111\n",
      "112\n",
      "113\n",
      "116\n",
      "117\n",
      "119\n",
      "120\n",
      "123\n",
      "125\n",
      "126\n",
      "127\n",
      "128\n",
      "129\n",
      "132\n",
      "133\n",
      "134\n",
      "135\n",
      "136\n",
      "137\n",
      "138\n",
      "139\n",
      "140\n",
      "138\n",
      "135\n",
      "132\n",
      "130\n",
      "129\n",
      "128\n",
      "126\n",
      "124\n",
      "123\n",
      "122\n",
      "120\n",
      "119\n",
      "116\n",
      "112\n",
      "109\n",
      "107\n",
      "106\n",
      "103\n",
      "102\n",
      "101\n",
      "100\n",
      "99\n",
      "98\n",
      "97\n",
      "96\n",
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "def nothing(x):\n",
    "    print(x)\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "\n",
    "# Create trackbars for position x , y \n",
    "\n",
    "cv2.createTrackbar('x', 'window', 0, 500, nothing)\n",
    "cv2.createTrackbar('y', 'window', 0, 500, nothing)\n",
    "\n",
    "\n",
    "# Create trackbars for color red , green , blue\n",
    "\n",
    "cv2.createTrackbar('Red', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Geen', 'window', 10, 255, nothing)\n",
    "cv2.createTrackbar('Blue', 'window', 10, 255, nothing)\n",
    "\n",
    "\n",
    "# Create trackbar for radius\n",
    "\n",
    "cv2.createTrackbar('radius', 'window', 1, 225, nothing)\n",
    "\n",
    "\n",
    "\n",
    "# Create a 500x500 RGB image \n",
    "image = np.zeros((500,500,3),np.uint8)\n",
    "\n",
    "\n",
    "while 1:\n",
    "    \n",
    "    \n",
    "    \n",
    "    image[:]=0\n",
    "    x = cv2.getTrackbarPos('x', 'window') \n",
    "    y = cv2.getTrackbarPos('y', 'window')\n",
    "   \n",
    "   \n",
    "\n",
    "    red = cv2.getTrackbarPos('Red', 'window')\n",
    "    green = cv2.getTrackbarPos('Geen', 'window')\n",
    "    blue = cv2.getTrackbarPos('Blue', 'window')\n",
    "    \n",
    "    radius = cv2.getTrackbarPos('radius', 'window')\n",
    "    \n",
    "\n",
    "\n",
    "    cv2.circle(image,(x,y),radius,(blue,green,red),3)\n",
    "\n",
    "    # Show the image in the window\n",
    "    cv2.imshow('window', image)\n",
    "    \n",
    "    k= cv2.waitKey(1) \n",
    "       \n",
    "    if k==ord('q'):\n",
    "        print('break the loop')\n",
    "        break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "983c36a3",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddfb2cc3",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#990000;\"> Q4)</span> Create image `800*800` rgb write a word `Hello` with `red` color and draw `yellow` `rectangle` on border of word.\n",
    "- Create a `800x800` RGB image.\n",
    "- write a word `Hello` with `red` color.\n",
    "- Draw `yellow` `rectangle` on border."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5374a93d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2030faef1c0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a 800x800 RGB image \n",
    "image = np.zeros((800,800,3),np.uint8)\n",
    "\n",
    "# write a word Hello with red color\n",
    "cv2.putText(image,\"Hello\",(40,500),cv2.FONT_HERSHEY_PLAIN,20,(255,0,0),3,cv2.LINE_AA)\n",
    "\n",
    "# Draw yellow rectangle on border\n",
    "cv2.rectangle(image,(20,250),(790,600),(255,255,0),5)\n",
    "\n",
    "plt.imshow(image)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d31266e",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7240f13d",
   "metadata": {},
   "source": [
    "###  <span style=\"color:#990000;\"> Q5)</span> create image `800*800` rgb with `red circle` in center of image with `radius 100` and make `small blue circle` with `radius 6` that move within circumference of the big circle every `1 second 10` degree. \n",
    "- create image `800*800` rgb.\n",
    "- Draw `red circle` in center of image with `radius 100`.\n",
    "- Draw small `blue circle` with radius `6` ( angle increments by `1 every 1sec`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4a3b6f52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "break the loop\n"
     ]
    }
   ],
   "source": [
    "from math import cos , sin , radians\n",
    "\n",
    "\n",
    "def nothing(x):\n",
    "    pass\n",
    "    \n",
    "    \n",
    "# Create a window \n",
    "cv2.namedWindow('window')\n",
    "\n",
    "\n",
    "angle =0\n",
    "\n",
    "while 1:\n",
    "     image = np.zeros((800, 800, 3),np.uint8)\n",
    "   \n",
    "     # Draw red circle in center of image with radius 100\n",
    "     cv2.circle(image,(400,400),100,(255,0,0),2)\n",
    "      \n",
    "\n",
    "     # Draw small blue circle with radius 6 ( angle increments by 1 every 1sec)\n",
    "     angle += 1\n",
    "     x= int (400 +100*cos(radians(angle)))\n",
    "     y= int (400 +100*sin(radians(angle)))\n",
    "   \n",
    "     cv2.circle(image,(x,y),6,(0,0,255),3)\n",
    "    \n",
    "     cv2.imshow('window', image)\n",
    "    \n",
    "     k= cv2.waitKey(1000)\n",
    "        \n",
    "    \n",
    "     if k==ord('q'):\n",
    "         print('break the loop')\n",
    "         break\n",
    "\n",
    "\n",
    "cv2.destroyAllWindows()  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fa95d04",
   "metadata": {},
   "source": [
    " "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
